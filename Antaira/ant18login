#! /usr/bin/expect --

#
# ant18login - Antaria login for the LNX-1802GN-T
# This switch does not have a regular show running-config
#
#  This switch is challenging because it has multiple command set levels
#  there is not a global "show config" like normal network appliance
#  the levels are:
# 	User Exec (E)				switch>
# 	Privileged Exec (P)			switch#
# 	Global configuration (G)	switch(config)#
# 	VLAN database (V)			switch(vlan)#
# 	Interface configuration (I)	switch(config)#

# 	use enable / disable to move in/out of (E) to (P)
# 	use "vlan database" / exit to move in/out of (P) to (V)
# 		YES, you have to be in (P) before going to (V)

#  show config provides the following (E)& (P) info:
# 	=System Information=		>show system-info
#  	=IP Information=			#show ip
#  	=Terminal Information=		#show terminal
#  	=Interface Configuration=
#  	=Interface Status=
# 	=Interface Statistics=		!!!! This one gets filtered out later
# 	=Port Mirroring=			#show monitor
# 	=RSTP Information=			>show spanning-tree
# 	=IEEE 802.1X=				>show 8021x
# 	=IGMP Information=			#show igmp configuration
# 	=Static MAC Table=			#show mac-address-table static
# 	=MAC Filter Table=			#show mac-address-table filter

#  However, some important ones are missing...
# 	SNMP            	#show snmp
# 	NTP             	#show sntp
# 	Multicast       	#show multicast-filtering
# 	DHCP Conf       	#show dhcpserver configuration
# 	SMTP            	#show smtp
# 	X-Ring          	#show ring
# 	QOS             	#show qos
# 	LLDP           		#show lldp

# 	Event Selection 	#show event
# 	IP security     	#show security
# 	Fault Relay Alarm   #show faultrelay

#  To see the vlan configuration, it is even more interesting
# 	switch#vlan database
# 	switch(vlan)#show vlan
# 	switch(vlan)#exit
# 	switch#
 
#  Therefore this script needs to be evaluate the command given and 
#  escalate to the correct level.
#  Since the (E) level only has 5 possible commands:
# 	system-info                Show system information
# 	spanning-tree              Show spanning tree information
# 	config                     Show switch configure
# 	8021x                      Show summary of 802.1x states
# 	systemlog                  Show systemlog table
 
#  And the (V) level only has 1 command:
# 	vlan                       Show vlan database information

#  It makes since to enable prior to command execution unless
#  one of the (E) or (V) commands

#  Will take advantage of what info is in the "show config" to
#  save time and calls to the switch

# Sometimes routers take awhile to answer (the default is 10 sec)
set timeoutdflt 45
# Some CLIs having problems if we write too fast (Extreme, PIX, Cat)
set send_human {.2 .1 .4 .2 1}

# Usage line
set usage "Usage: $argv0 \[-dhiSV\] \[-m|M\]  \
\[-c command\] \[-Evar=x\]  \[-f cloginrc-file\] \
\[-p user-password\] \[-r passphrase\] \[-s script-file\] \[-t timeout\] \
\[-u username\] \[-v vty-password\] \[-x command-file\] \
\[-y ssh_cypher_type\] router \[router...\]\n"


# We will limit the accepted commands to "show" commands
# This array will help us to know at what level we execute the command
# See antrancid for complete explanation
# User Exec (E)  switch>
set cmdlevel(system-info) 			E
set cmdlevel(spanning-tree)			E
set cmdlevel(config)				E
set cmdlevel(8021x)					E
set cmdlevel(systemlog)				E
# Privileged Exec (P) switch#
set cmdlevel(ip)					P
set cmdlevel(admin)					P
set cmdlevel(aggregator)			P
set cmdlevel(snmp)					P
set cmdlevel(sntp)					P
set cmdlevel(mac-address-table)		P
set cmdlevel(monitor)				P
set cmdlevel(terminal)				P
set cmdlevel(igmp)					P
set cmdlevel(multicast-filtering)	P
set cmdlevel(systemlog)				P
set cmdlevel(dhcpserver\ configuration)			P
set cmdlevel(smtp)					P
set cmdlevel(ring)					P
set cmdlevel(qos)					P
set cmdlevel(event)					P
set cmdlevel(security)				P
set cmdlevel(faultrelay)			P
set cmdlevel(lldp)					P
# VLAN database (V)	  switch(vlan)#
set cmdlevel(vlan)					V



# Password file
set password_file $env(HOME)/.cloginrc
# Default is to login to the router
set do_command 0
set do_interact 0
set do_script 0
# The default is to automatically enable
if {! [info exists avenable]} {
    set avenable 1
}
# The default is that you login non-enabled (tacacs can have you login already
# enabled)
set avautoenable 0
# The default is to look in the password file to find the passwords.  This
# tracks if we receive them on the command line.
set do_passwd 1


# cloginrc debugging knob
set do_cloginrcdbg 0
# Sometimes routers take awhile to answer (the default is 10 sec)
if {! [info exists timeoutdflt]} {
    set timeoutdflt 10
}
# spawn tty options
set spawnopts {}
# intialize cloginrc parsing stacks
set int_file {}
set int_lineno {}



# Find the user in the ENV, or use the unix userid.
if {![info exists default_user] && [info exists env(CISCO_USER)]} {
    if {[string length $env(CISCO_USER)]} {
	set default_user $env(CISCO_USER)
    }
}
if {![info exists default_user] && [info exists env(USER)]} {
    if {[string length $env(USER)]} {
	set default_user $env(USER)
    }
}
if {![info exists default_user] && [info exists env(LOGNAME)]} {
    if {[string length $env(LOGNAME)]} {
	set default_user $env(LOGNAME)
    }
}
if (![info exists default_user]) {
    # This uses "id" which I think is portable.  At least it has existed
    # (without options) on all machines/OSes I've been on recently -
    # unlike whoami or id -nu.
    if [catch {exec id} reason] {
		send_error "\nError: could not exec id: $reason\n"
		exit 1
    }
    regexp {\(([^)]*)} "$reason" junk default_user
}
if {[info exists env(CLOGINRC)]} {
    set password_file $env(CLOGINRC)
}

# Process the command line
for {set i 0} {$i < $argc} {incr i} {
    set arg [lindex $argv $i]

    switch  -glob -- $arg {
		# Expect debug mode
		-d* {
			exp_internal 1
		# Help
		} -h* {
			send_user "$usage"
			exit 0

		# Command to run.
		} -c* {
			if {! [regexp .\[cC\](.+) $arg ignore command]} {
				incr i
				set command [lindex $argv $i]
			}
			set do_command 1

		# Environment variable to pass to -s scripts
		} -E* {
			if {[regexp .\[E\](.+)=(.+) $arg ignore varname varvalue]} {
				set E$varname $varvalue
			} else {
				send_user "\nError: invalid format for -E in $arg\n"
				exit 1
			}

		# alternate cloginrc file
		} -f* {
			if {! [regexp .\[fF\](.+) $arg ignore password_file]} {
			incr i
			set password_file [lindex $argv $i]
			}
		# interactive
		} -i* {
			set do_interact 1

		# user Password
		} -p* {
			if {! [regexp .\[pP\](.+) $arg ignore userpasswd]} {
			incr i
			set userpasswd [lindex $argv $i]
			}
			set do_passwd 0

		# cloginrc debugging knobs
		} -m* {
			set do_cloginrcdbg 1

		} -M* {
			set do_cloginrcdbg 2

		# ssh passphrase
		} -r* {
			if {! [regexp .\[rR\](.+) $arg ignore passphrase]} {
			incr i
			set avpassphrase [lindex $argv $i]
			}

		# Expect script to run.
		} -s* {
			if {! [regexp .\[sS\](.+) $arg ignore sfile]} {
			incr i
			set sfile [lindex $argv $i]
			}
			if {! [file readable $sfile]} {
			send_user "\nError: Can't read $sfile\n"
			exit 1
			}
			set do_script 1

		# Timeout
		} -t* {
			if {! [regexp .\[tT\](.+) $arg ignore timeout]} {
			incr i
				set timeoutdflt [lindex $argv $i]
			}

		# Username
		} -u* {
			if {! [regexp .\[uU\](.+) $arg ignore user]} {
			incr i
			set username [lindex $argv $i]
			}

		# VTY Password
		} -v* {
			# some scripts ignore -v, like jlogin
			if {! [regexp .\[vV\](.+) $arg ignore passwd]} {
			incr i
			set passwd [lindex $argv $i]
			}
			set do_passwd 0

		# Version string
		} -V* {
			send_user "rancid 3.11\n"
			exit 0

		# Command file
		} -x* {
			if {! [regexp .\[xX\](.+) $arg ignore cmd_file]} {
			incr i
			set cmd_file [lindex $argv $i]
			}
			if [catch {set cmd_fd [open $cmd_file r]} reason] {
			send_user "\nError: $reason\n"
			exit 1
			}
			set cmd_text [read $cmd_fd]
			close $cmd_fd
			set command [join [split $cmd_text \n] \;]
			set do_command 1

		# 'ssh -c' cypher type
		} -y* {
			if {! [regexp .\[eE\](.+) $arg ignore cypher]} {
			incr i
			set cypher [lindex $argv $i]
			}

		} -* {
			send_user "\nError: Unknown argument! $arg\n"
			send_user $usage
			exit 1
		} default {
			break
		}
    }
}
# Process routers...no routers listed is an error.
if {$i == $argc} {
    send_user "\nError: $usage"
}

# send_user "Good to 370!"; exit;


# Only be quiet if we are running a script (it can log its output
# on its own)
if {$do_script} {
    log_user 0
} else {
    log_user 1
}

#
# Done configuration/variable setting.  Now run with it...
#

# Sets Xterm title if interactive...if its an xterm and the user cares
proc label {host} {
    global env
    # if CLOGIN has an 'x' in it, don't set the xterm name/banner
    if [info exists env(CLOGIN)] {
		if {[string first "x" $env(CLOGIN)] != -1} { return }
    }
    # take host from ENV(TERM)
    if [info exists env(TERM)] {
		if [regexp \^(xterm|vs) $env(TERM) ignore] {
			send_user "\033]1;[lindex [split $host "."] 0]\a"
			send_user "\033]2;$host\a"
		}
    }
}


# This is a helper function to make the password file easier to
# maintain.  Using this the password file has the form:
# add password sl*	pete cow
# add password at*	steve
# add password *	hanky-pie
proc add {var args} {
    global int_file int_lineno int_$var
    set file [lindex $int_file 0]
    set lineno [lindex $int_lineno 0]
    lappend int_$var "$var:$file:$lineno: $args"
}
proc include {args} {
    global env
    regsub -all "(^{|}$)" $args {} args
    if {[regexp "^/" $args ignore] == 0} {
	set args $env(HOME)/$args
    }
    source_password_file $args
}

proc find {var router} {
    global do_cloginrcdbg
    upvar int_$var list
    if {[info exists list]} {
	foreach line $list {
	    if {[string match -nocase [lindex $line 1] $router]} {
		if {$do_cloginrcdbg > 0} {
		    send_error -- [join [list [lindex $line 0] [lrange $line 1 end] "\r\n"]]
		}
		if {$do_cloginrcdbg == 2} {
		    # save return value
		    if {! [info exists result]} {
			set result [lrange $line 2 end]
		    }
		} else {
		    return [lrange $line 2 end]
		}
	    }
	}
    }

    if {$do_cloginrcdbg == 2} {
	if {[info exists result]} {
	    return $result
	}
    }
    return {}
}



# Loads the password file.  Note that as this file is tcl, and that
# it is sourced, the user better know what to put in there, as it
# could install more than just password info...  I will assume however,
# that a "bad guy" could just as easy put such code in the clogin
# script, so I will leave .cloginrc as just an extention of that script
proc source_password_file {file} {
    global env int_file int_lineno
    if {! [file exists $file]} {
		send_user "\nError: password file ($file) does not exist\n"
		exit 1
    }
    file stat $file fileinfo
    if {[expr ($fileinfo(mode) & 007)] != 0000} {
		send_user "\nError: $file must not be world readable/writable\n"
		exit 1
    }
    if [catch {set fd [open $file "r"]} reason] {
		send_user "\nError: $reason\n"
		exit 1
    }
    set int_file [linsert $int_file 0 $file]
    set int_lineno [linsert $int_lineno 0 0]
    while {[gets $fd line] >= 0} {
		set tmp [lindex $int_lineno 0]; incr tmp
		lset int_lineno 0 $tmp
		eval $line
    }
    set int_file [lrange $int_file 1 end]
    set int_lineno [lrange $int_lineno 1 end]
    close $fd
}

# Log into the router.
# returns: 0 on success, 1 on failure
proc login { router user userpswd passwd cmethod cyphertype identfile } {
    global spawn_id in_proc do_command do_script passphrase
    global prompt u_prompt p_prompt e_prompt sshcmd telnetcmd
    set in_proc 1

    # try each of the connection methods in $cmethod until one is successful
    set progs [llength $cmethod]
    foreach prog [lrange $cmethod 0 end] {
		incr progs -1
		regexp {(telnet|ssh)(:([^[:space:]]+))*} $prog command suffix junk port

		## send_user "telnetcmd ===  $telnetcmd\n\n"

		if [string match "telnet*" $prog] {
			if {"$port" == ""} {
				set retval [ catch {eval spawn [split "$telnetcmd $router"]} reason ]
			} else {
				set retval [ catch {eval spawn [split "$telnetcmd $router $port"]} reason ]
			}
			if { $retval } {
				send_user "\nError: telnet failed: $reason\n"
				return 1
			}
		} elseif [string match "ssh*" $prog] {
			# ssh to the router & try to login with or without an identfile.
			regexp {ssh(:([^[:space:]]+))*} $prog methcmd suffix port
			set cmd $sshcmd
			if {"$port" != ""} {
				set cmd "$cmd -p $port"
			}
			if {"$cyphertype" != ""} {
				set cmd "$cmd -c $cyphertype"
			}
			if {"$identfile" != ""} {
				set cmd "$cmd -i $identfile"
			}
			if { $do_command || $do_script } {
			# set retval [ catch {eval spawn hpuifilter -- [split "$cmd -x -l $user $router" { }]} reason ]
			# } else {
				set retval [ catch {eval spawn [split "$cmd -x -l $user $router" { }]} reason ]
			}
			if { $retval } {
				send_user "\nError: $cmd failed: $reason\n"
				return 1
			}
		} elseif ![string compare $prog "rsh"] {
			send_error "\nError: unsupported method: rsh\n"
			if { $progs == 0 } {
				return 1
			}
			continue;
		} else {
			send_user "\nError: unknown connection method: $prog\n"
			return 1
		}
		sleep 0.3

		# This helps cleanup each expect clause.
		expect_after {
			timeout {
				global in_proc
				send_user "\nError: TIMEOUT reached\n"
				catch {close}; catch {wait};
				if {$in_proc} {
					return 1
				} else {
					continue
				}
			} eof {
				global in_proc
				send_user "\nError: EOF received\n"
				catch {close}; catch {wait};
				if {$in_proc} {
					return 1
				} else {
					continue
				}
			}
		}

		# Here we get a little tricky.  There are several possibilities:
		# the router can ask for a username and passwd and then
		# talk to the TACACS server to authenticate you, or if the
		# TACACS server is not working, then it will use the enable
		# passwd.  Or, the router might not have TACACS turned on,
		# then it will just send the passwd.
		# if telnet fails with connection refused, try ssh
		# send_user "!!!!!!!!!!!!!!!!!!!  Entering the expect loop  !!!!!!!!!!!!!!!!!!!!!!!"

		expect {
			-re "$u_prompt"	{ send -- "$user\r"
				expect {
					eof			{ send_user "\nError: Couldn't login\n"; wait; return 1 }
					"Login invalid"		{ send_user "\nError: Invalid login\n";
								catch {close}; catch {wait};
								return 1
								}
					-re "$p_prompt"		{ send -- "$userpswd\r" }
					-re "$prompt"		{ set in_proc 0; return 0 }
					-re "\[^\r\n]*\[\r\n]+"	{ exp_continue; }
					"Press any key to continue" {
								send " "
								exp_continue
								}
				}
				exp_continue
			}
			-re "$p_prompt"	{
				if ![string compare $prog "ssh"] {
					send -- "$userpswd\r"
				} else {
					send -- "$passwd\r"
				}
				expect {
					eof		{ send_user "\nError: Couldn't login\n";
							wait;
							return 1
							}
					"Press any key to continue" {
							send " ";
							exp_continue
							}
					-re "$e_prompt"	{ send -- "$enapasswd\r" }
					-re "$prompt"	{ set in_proc 0;
							return 0
							}
					-re "\[^\r\n]*\[\r\n]+"	{ exp_continue; }
				}
				exp_continue
			}
			-re "\[^\r\n]*\[\r\n]+"	{ exp_continue; }
			-re "$prompt"		{
					break;
					}
			denied		{ send_user "\nError: Check your passwd for $router\n"
					catch {close}; catch {wait}; return 1
					}
			"% Bad passwords" {
				send_user "\nError: Check your passwd for $router\n";
				return 1
				}
		}
	}
	set in_proc 0
	return 0
}

# Enable
# proc do_enable { enauser enapasswd } {
#     global prompt in_proc
#     global u_prompt e_prompt
#     set in_proc 1

#     send "enable\r"
#     expect {
# 		-re "$u_prompt"	{ send -- "$enauser\r"; exp_continue}
# 		-re "$e_prompt"	{ send -- "$enapasswd\r"; exp_continue}
# 		"#"		{ set prompt "#" }
# 		"(enable)"	{ set prompt "> (enable) " }
# 		denied		{ send_user "\nError: Check your Enable passwd\n"; return 1}
# 		"% Bad passwords" {
# 			send_user "\nError: Check your Enable passwd\n"
# 			return 1
# 		}
#     }
#     # We set the prompt variable (above) so script files don't need
#     # to know what it is.
#     set in_proc 0
#     return 0
# }
proc go_privileged {} {
	global prompt in_proc priv_prompt
	set in_proc 1
	send "enable\r"

	expect {
		$priv_prompt	{catch {send_user -- "$expect_out(buffer)"}}
	}

	set in_proc 0
	return 0
}

proc leave_privileged {} {
	global prompt in_proc priv_prompt
	set in_proc 1
	send "disable\r"

	expect {
		$prompt	{catch {send_user -- "$expect_out(buffer)"}}
	}
	set in_proc 0
	return 0
}

proc go_vlan {} {
	global prompt in_proc vlan_prompt
	set in_proc 1

	# Have to be Privileged Exec first
	go_privileged

	send "vlan database\r"

	expect {
		$vlan_prompt	{catch {send_user -- "$expect_out(buffer)"}}
	}
	set in_proc 0
	return 0


}

proc leave_vlan {} {
	global prompt in_proc priv_prompt
	set in_proc 1

	send "exit\r"

	expect {
		$priv_prompt	{catch {send_user -- "$expect_out(buffer)"}}
	}

	# Now we need to drop User Exec
	leave_privileged

	set in_proc 0
	return 0

}


# Run commands given on the command line.
proc run_commands { prompt command } {
	# global do_interact do_saveconfig in_proc
    global do_interact in_proc cmdlevel vlan_prompt priv_prompt
    set in_proc 1
	set run_level 0



    log_user 0

    # handle escaped ;s in commands, and ;; and ^;
    regsub -all {([^\\]);} $command "\\1\u0002;" esccommand
    regsub -all {([^\\]);;} $esccommand "\\1;\u0002;" command
    regsub {^;} $command "\u0002;" esccommand
    regsub -all {[\\];} $esccommand ";" command
    regsub -all {\u0002;} $command "\u0002" esccommand
    set sep "\u0002"
    set commands [split $esccommand $sep]
    set num_commands [llength $commands]
    # if the pager can not be turned off, we have to look for the "More"
    # prompt.
    for {set i 0} {$i < $num_commands} { incr i} {

		set this_commnd [lindex $commands $i]

		# Test for commands starting with "show"
		# exit for all others
		if {![string match "show*" $command]} {
			send_user -- "\nError: Only show commands are allowed -- cmd: $command\n"
			set in_proc 0
			return 1
		}


		# Get the run level needed for the command.
		# To see dhcpserver configuration (show dhcpserver configuration)
		set cmd_split  [split $this_commnd " "]
		if { [llength $cmd_split] == 3 } {
			set cmd_action [join [lrange $cmd_split 1 2] "\ "]

		} else {
			set cmd_action [lindex $cmd_split 1]
		}

		if {[info exists cmdlevel($cmd_action)]} {
			set run_level $cmdlevel($cmd_action)
		} else {
			send_user -- "\nError: Unknow command -- cmd: $this_commnd || action: $cmd_action\n"
			set in_proc 0
			return 1
		}

		if {$run_level=="P"} {
			go_privileged
			set reprompt $priv_prompt
		} elseif {$run_level=="V"} {
			go_vlan
			set reprompt $vlan_prompt
		} else {
			set reprompt $prompt
		}


		#send -- "[subst -nocommands [lindex $commands $i]]\r"
		send -- "$this_commnd\r"
		expect {
			# This has to be BEFORE the \n\r+ regex or it will never match
			-re "^----More--- +\[\n\r]+" {
						catch {send "\r"}
						after 33; 	# pause briefly

						exp_continue
					}
			-re "^\[^\n\r *]*$reprompt"	{
						catch {send_user -- "$expect_out(buffer)"}
					}
			-re "^\[^\n\r]*$reprompt "	{
						catch {send_user -- "$expect_out(buffer)"}
					}
			-re "\[\n\r]+"		{
						catch {send_user -- "$expect_out(buffer)"}
						exp_continue
					}
			$reprompt {
					catch {send_user -- "$expect_out(buffer)"}
				}

			-re "\b+"			{
					exp_continue
				}
		}

		# If we are at any level other than User Exec, we need to return to User Exec
		if {$run_level == "P"} {
			leave_privileged
		} elseif {$run_level == "V"} {
			leave_vlan
		}

		after 50;   # pause briefly before the next loop

    }
    log_user 1

    if { $do_interact == 1 } {
		interact
		return 0
    }


    send -h "logout\r"
    expect {
		-re "\[\r\n]+"				{ exp_continue }
		-re "^.+\[#>]"	{
							# some require logout from
							# enabled, then the login, and
							# some do not have logout cmd
							catch {send -h "exit\r"}
							exp_continue
							}
		timeout	{ catch {close}; catch {wait};
							return 0
							}
		eof					{ return 0 }
    }
    set in_proc 0
}


#
# For each router... (this is main loop)
#
source_password_file $password_file
set in_proc 0
set exitval 0
# if we dont have a tty, we need some additional terminal settings
if [catch {open /dev/tty w} ttyid] {
    # no tty, ie: cron
    set spawnopts "-nottycopy"
    set stty_init "cols 132"
} else {
    catch {close ttyid} reason
}

foreach router [lrange $argv $i end] {
    set router [string tolower $router]
    send_user -- "$router\n"

    # device timeout
    set timeout [find timeout $router]
    if { [llength $timeout] == 0 } {
		set timeout $timeoutdflt
    }


	#set prompt "switch(>|#)?"
	#set prompt "switch>?"
	set prompt "switch>"
	set priv_prompt "switch#"
	set vlan_prompt "switch(vlan)#"


    # Figure out passwords
	if { $do_passwd } {
		set pswd [find password $router]
		if { [llength $pswd] == 0 } {
			send_user -- "\nError: no password for $router in $password_file.\n"
			continue
		}

		if { $do_passwd } {
			set passwd [join [lindex $pswd 0] ""]
		} else {
			set passwd $userpasswd
		}
    } else {
		set passwd $userpasswd
    }




    # Figure out username
    if {[info exists username]} {
      # command line username
      set ruser $username
    } else {
      set ruser [join [find user $router] ""]
      if { "$ruser" == "" } { set ruser $default_user }
    }

    # Figure out username's password (if different from the vty password)
    if {[info exists userpasswd]} {
      # command line username
      set userpswd $userpasswd
    } else {
      set userpswd [join [find userpassword $router] ""]
      if { "$userpswd" == "" } { set userpswd $passwd }
    }

    # Figure out prompts
    set u_prompt [find userprompt $router]
    if { "$u_prompt" == "" } {
		set u_prompt "(\[Uu]ser \[Nn]ame) :"
    } else {
		set u_prompt [join [lindex $u_prompt 0] ""]
    }
    set p_prompt [find passprompt $router]
	if { "$p_prompt" == "" } {
		set p_prompt "Password  :"
    }

    set e_prompt [find enableprompt $router]
    if { "$e_prompt" == "" } {
		set e_prompt "\[Pp]assword:"
    } else {
		set e_prompt [join [lindex $e_prompt 0] ""]
    }


    # Figure out identity file to use
    set identfile [join [lindex [find identity $router] 0] ""]

    # Figure out passphrase to use
    if {[info exists avpassphrase]} {
		set passphrase $avpassphrase
    } else {
		set passphrase [join [lindex [find passphrase $router] 0] ""]
    }
    if { ! [string length "$passphrase"]} {
		set passphrase $passwd
    }

    # Figure out cypher type
    if {[info exists cypher]} {
      # command line cypher type
      set cyphertype $cypher
    } else {
      set cyphertype [find cyphertype $router]
    }

    # Figure out connection method
    set cmethod [find method $router]
    if { "$cmethod" == "" } { set cmethod {{telnet} {ssh}} }

    # Figure out the SSH executable name
    set sshcmd [join [lindex [find sshcmd $router] 0] ""]
    if { "$sshcmd" == "" } { set sshcmd {ssh} }

    # Figure out the telnet executable name
    set telnetcmd [join [lindex [find telnetcmd $router] 0] ""]
    if { "$telnetcmd" == "" } { set telnetcmd "telnet -K" }

    # if [-mM], skip do not login
    if { $do_cloginrcdbg > 0 } { continue; }


    # Login to the router
	if {[login $router $ruser $userpswd $passwd $cmethod $cyphertype $identfile]} {
		incr exitval
		continue
    }

    if { $do_command } {
		if {[run_commands $prompt $command]} {
			incr exitval
			continue
		}
    } elseif { $do_script } {
		source $sfile
		catch {close};
    } else {
		label $router
		log_user 1
		interact
    }

    # End of for each router
    catch {wait};
    sleep 0.3
}
exit $exitval
